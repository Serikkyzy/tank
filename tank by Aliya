import pygame
import random
import math

GRAD = math.pi / 180


class Config(object):
    fullscreen = False
    width = 640
    height = 480
    fps = 100
    xtiles = 30
    ytiles = 20


class Text(pygame.sprite.Sprite):
    number = 0
    book = {}

    def __init__(self, pos, msg):
        self.number = Text.number
        Text.number += 1
        Text.book[self.number] = self
        pygame.sprite.Sprite.__init__(self, self.groups)
        self.pos = [0.0, 0.0]
        self.pos[0] = pos[0]
        self.pos[1] = pos[1]
        self.msg = msg
        self.changemsg(msg)

    def update(self, seconds):
        pass

    def changemsg(self, msg):
        self.msg = msg
        self.image = write(self.msg)
        self.rect = self.image.get_rect()
        self.rect.centerx = self.pos[0]
        self.rect.centery = self.pos[1]


class Bullet(pygame.sprite.Sprite):
    side = 7  # small side of bullet rectangle
    vel = 180  # velocity
    mass = 50
    maxlifetime = 10.0  # seconds

    def __init__(self, boss):
        pygame.sprite.Sprite.__init__(self, self.groups)
        self.boss = boss
        self.dx = 0
        self.dy = 0
        self.angle = 0
        self.lifetime = 0.0
        self.color = self.boss.color
        self.calculate_heading()
        self.dx += self.boss.dx
        self.dy += self.boss.dy
        self.pos = self.boss.pos[:]
        self.calculate_origin()
        self.update()

    def calculate_heading(self):
        self.radius = Bullet.side
        self.angle += self.boss.turretAngle
        self.mass = Bullet.mass
        self.vel = Bullet.vel
        image = pygame.Surface((Bullet.side * 2, Bullet.side))
        image.fill((128, 128, 128))
        pygame.draw.rect(image, self.color, (0, 0, int(Bullet.side * 1.5), Bullet.side))
        pygame.draw.circle(image, self.color, (int(self.side * 1.5), self.side // 2), self.side // 2)
        image.set_colorkey((128, 128, 128))
        self.image0 = image.convert_alpha()
        self.image = pygame.transform.rotate(self.image0, self.angle)
        self.rect = self.image.get_rect()
        self.dx = math.cos(degrees_to_radians(self.boss.turretAngle)) * self.vel
        self.dy = math.sin(degrees_to_radians(-self.boss.turretAngle)) * self.vel

    def calculate_origin(self):
        self.pos[0] += math.cos(degrees_to_radians(self.boss.turretAngle)) * (Tank.side - 20)
        self.pos[1] += math.sin(degrees_to_radians(-self.boss.turretAngle)) * (Tank.side - 20)

    def update(self, seconds=0.0):
        self.lifetime += seconds
        if self.lifetime > Bullet.maxlifetime:
            self.kill()
        self.pos[0] += self.dx * seconds
        self.pos[1] += self.dy * seconds
        if self.pos[0] < 0:
            self.kill()
        elif self.pos[0] > Config.width:
            self.kill()
        if self.pos[1] < 0:
            self.kill()
        elif self.pos[1] > Config.height:
            self.kill()
        self.rect.centerx = round(self.pos[0], 0)
        self.rect.centery = round(self.pos[1], 0)


class Tracer(Bullet):
    side = 15
    vel = 200
    mass = 10
    color = (200, 0, 100)
    maxlifetime = 10.0

    def __init__(self, boss, turret=False):
        self.turret = turret
        Bullet.__init__(self, boss)

    def calculate_heading(self):
        self.radius = Tracer.side
        self.angle = 0
        self.angle += self.boss.tankAngle
        if self.turret:
            self.angle = self.boss.turretAngle
        self.mass = Tracer.mass
        self.vel = Tracer.vel
        image = pygame.Surface((Tracer.side, Tracer.side / 4))
        image.fill(self.boss.color)
        pygame.draw.rect(image, (0, 0, 0), (Tracer.side * .75, 0, Tracer.side, Tracer.side / 4))  # red dot at front
        image.set_colorkey((128, 128, 128))
        self.image0 = image.convert_alpha()
        self.image = pygame.transform.rotate(self.image0, self.angle)
        self.rect = self.image.get_rect()
        if self.turret:
            self.dx = math.cos(degrees_to_radians(self.boss.turretAngle)) * self.vel
            self.dy = math.sin(degrees_to_radians(-self.boss.turretAngle)) * self.vel
        else:
            # bow mg
            self.dx = math.cos(degrees_to_radians(self.boss.tankAngle)) * self.vel
            self.dy = math.sin(degrees_to_radians(-self.boss.tankAngle)) * self.vel

    def calculate_origin(self):
        if self.turret:
            self.pos[0] += math.cos(degrees_to_radians(-90 + self.boss.turretAngle)) * 15
            self.pos[1] += math.sin(degrees_to_radians(90 - self.boss.turretAngle)) * 15
        else:
            self.pos[0] += math.cos(degrees_to_radians(30 + self.boss.tankAngle)) * (Tank.side / 2)
            self.pos[1] += math.sin(degrees_to_radians(-30 - self.boss.tankAngle)) * (Tank.side / 2)


class Tank(pygame.sprite.Sprite):
    side = 100
    recoiltime = 0.75
    mgrecoiltime = 0.2
    turretTurnSpeed = 25
    tankTurnSpeed = 8
    movespeed = 25
    maxrotate = 360
    book = {}
    number = 0
    firekey = (pygame.K_k, pygame.K_DOWN)
    mgfirekey = (pygame.K_LCTRL, pygame.K_KP_ENTER)
    mg2firekey = (pygame.K_i, pygame.K_UP)
    turretLeftkey = (pygame.K_j, pygame.K_LEFT)
    turretRightkey = (pygame.K_l, pygame.K_RIGHT)
    forwardkey = (pygame.K_w, pygame.K_KP8)
    backwardkey = (pygame.K_s, pygame.K_KP5)
    tankLeftkey = (pygame.K_a, pygame.K_KP4)
    tankRightkey = (pygame.K_d, pygame.K_KP6)
    color = ((200, 200, 0), (0, 0, 200))
    msg = ["", ""]

    def __init__(self, startpos=(150, 150), angle=0):
        self.number = Tank.number
        Tank.number += 1
        Tank.book[self.number] = self
        pygame.sprite.Sprite.__init__(self, self.groups)
        self.pos = [startpos[0], startpos[1]]
        self.dx = 0
        self.dy = 0
        self.ammo = 30
        self.mgammo = 500
        self.msg = "player%i: ammo: %i/%i keys: %s" % (self.number + 1, self.ammo, self.mgammo, Tank.msg[self.number])
        Text((Config.width / 2, 30 + 20 * self.number), self.msg)
        self.color = Tank.color[self.number]
        self.turretAngle = angle
        self.tankAngle = angle
        self.firekey = Tank.firekey[self.number]
        self.mgfirekey = Tank.mgfirekey[self.number]
        self.mg2firekey = Tank.mg2firekey[self.number]
        self.turretLeftkey = Tank.turretLeftkey[self.number]
        self.turretRightkey = Tank.turretRightkey[self.number]
        self.forwardkey = Tank.forwardkey[self.number]
        self.backwardkey = Tank.backwardkey[self.number]
        self.tankLeftkey = Tank.tankLeftkey[self.number]
        self.tankRightkey = Tank.tankRightkey[self.number]
        image = pygame.Surface((Tank.side, Tank.side))
        image.fill((128, 128, 128))
        if self.side > 10:
            pygame.draw.rect(image, self.color, (5, 5, self.side - 10, self.side - 10))
            pygame.draw.rect(image, (90, 90, 90), (0, 0, self.side // 6, self.side))
            pygame.draw.rect(image, (90, 90, 90), (self.side - self.side // 6, 0, self.side, self.side))
            pygame.draw.rect(image, (255, 0, 0), (self.side // 6 + 5, 10, 10, 5))
        pygame.draw.circle(image, (255, 0, 0), (self.side // 2, self.side // 2), self.side // 3,2)
        image = pygame.transform.rotate(image, -90)
        self.image0 = image.convert_alpha()
        self.image = image.convert_alpha()
        self.rect = self.image0.get_rect()
        self.firestatus = 0.0
        self.mgfirestatus = 0.0
        self.mg2firestatus = 0.0
        self.turndirection = 0
        self.tankturndirection = 0
        self.movespeed = Tank.movespeed
        self.turretTurnSpeed = Tank.turretTurnSpeed
        self.tankTurnSpeed = Tank.tankTurnSpeed
        Turret(self)

    def update(self, seconds):
        if self.firestatus > 0:
            self.firestatus -= seconds
            if self.firestatus < 0:
                self.firestatus = 0
        if self.mgfirestatus > 0:
            self.mgfirestatus -= seconds
            if self.mgfirestatus < 0:
                self.mgfirestatus = 0
        if self.mg2firestatus > 0:
            self.mg2firestatus -= seconds
            if self.mg2firestatus < 0:
                self.mg2firestatus = 0

        pressedkeys = pygame.key.get_pressed()
        self.turndirection = 0
        if pressedkeys[self.turretLeftkey]:
            self.turndirection += 1
        if pressedkeys[self.turretRightkey]:
            self.turndirection -= 1

        self.tankturndirection = 0
        if pressedkeys[self.tankLeftkey]:
            self.tankturndirection += 1
        if pressedkeys[self.tankRightkey]:
            self.tankturndirection -= 1

        self.tankAngle += self.tankturndirection * self.tankTurnSpeed * seconds
        oldcenter = self.rect.center
        oldrect = self.image.get_rect()
        self.image = pygame.transform.rotate(self.image0, self.tankAngle)
        self.rect = self.image.get_rect()
        self.rect.center = oldcenter
        self.turretAngle += self.tankturndirection * self.tankTurnSpeed * seconds + self.turndirection * self.turretTurnSpeed * seconds
        if (self.firestatus == 0) and (self.ammo > 0):
            if pressedkeys[self.firekey]:
                self.firestatus = Tank.recoiltime
                Bullet(self)
                self.ammo -= 1
                self.msg = "player%i: ammo: %i/%i keys: %s" % (
                self.number + 1, self.ammo, self.mgammo, Tank.msg[self.number])
                Text.book[self.number].changemsg(self.msg)
        if (self.mgfirestatus == 0) and (self.mgammo > 0):
            if pressedkeys[self.mgfirekey]:
                self.mgfirestatus = Tank.mgrecoiltime
                Tracer(self, False)
                self.mgammo -= 1
                self.msg = "player%i: ammo: %i/%i keys: %s" % (
                self.number + 1, self.ammo, self.mgammo, Tank.msg[self.number])
                Text.book[self.number].changemsg(self.msg)
        if (self.mg2firestatus == 0) and (self.mgammo > 0):
            if pressedkeys[self.mg2firekey]:
                self.mg2firestatus = Tank.mgrecoiltime
                Tracer(self, True)
                self.mgammo -= 1
                self.msg = "player%i: ammo: %i/%i keys: %s" % (
                self.number + 1, self.ammo, self.mgammo, Tank.msg[self.number])
                Text.book[self.number].changemsg(self.msg)
        self.dx = 0
        self.dy = 0
        self.forward = 0
        if pressedkeys[self.forwardkey]:
            self.forward += 1
        if pressedkeys[self.backwardkey]:
            self.forward -= 1
        if self.forward == 1:
            self.dx = math.cos(degrees_to_radians(self.tankAngle)) * self.movespeed
            self.dy = -math.sin(degrees_to_radians(self.tankAngle)) * self.movespeed
        if self.forward == -1:
            self.dx = -math.cos(degrees_to_radians(self.tankAngle)) * self.movespeed
            self.dy = math.sin(degrees_to_radians(self.tankAngle)) * self.movespeed
        self.pos[0] += self.dx * seconds
        self.pos[1] += self.dy * seconds
        if self.pos[1] + self.side // 2 >= Config.height:
            self.pos[1] = Config.height - self.side // 2
            self.dy = 0
        elif self.pos[1] - self.side / 2 <= 0:
            self.pos[1] = 0 + self.side // 2
            self.dy = 0
        self.rect.centerx = round(self.pos[0], 0)  # x
        self.rect.centery = round(self.pos[1], 0)  # y


class Turret(pygame.sprite.Sprite):
    def __init__(self, boss):
        pygame.sprite.Sprite.__init__(self, self.groups)
        self.boss = boss
        self.side = self.boss.side
        self.images = {}
        self.images[0] = self.draw_cannon(0)
        self.images[1] = self.draw_cannon(1)
        self.images[2] = self.draw_cannon(2)
        self.images[3] = self.draw_cannon(3)
        self.images[4] = self.draw_cannon(4)
        self.images[5] = self.draw_cannon(5)
        self.images[6] = self.draw_cannon(6)
        self.images[7] = self.draw_cannon(7)
        self.images[8] = self.draw_cannon(8)
        self.images[9] = self.draw_cannon(4)
        self.images[10] = self.draw_cannon(0)

    def update(self, seconds):
        if self.boss.firestatus > 0:
            self.image = self.images[int(self.boss.firestatus // (Tank.recoiltime / 10.0))]
        else:
            self.image = self.images[0]
        oldrect = self.image.get_rect()
        self.image = pygame.transform.rotate(self.image, self.boss.turretAngle)
        self.rect = self.image.get_rect()
        self.rect = self.image.get_rect()
        self.rect.center = self.boss.rect.center

    def draw_cannon(self, offset):
        image = pygame.Surface((self.boss.side * 2, self.boss.side * 2))
        image.fill((128, 128, 128))
        pygame.draw.circle(image, (255, 0, 0), (self.side, self.side), 22, 0)
        pygame.draw.circle(image, (0, 255, 0), (self.side, self.side), 18, 0)
        pygame.draw.rect(image, (255, 0, 0), (self.side - 10, self.side + 10, 15, 2))
        pygame.draw.rect(image, (0, 255, 0),
                         (self.side - 20 - offset, self.side - 5, self.side - offset, 10))
        pygame.draw.rect(image, (255, 0, 0), (self.side - 20 - offset, self.side - 5, self.side - offset, 10),
                         1)
        image.set_colorkey((128, 128, 128))
        return image

def radians_to_degrees(radians):
    return (radians / math.pi) * 180.0


def degrees_to_radians(degrees):
    return degrees * (math.pi / 180.0)


def write(msg="pygame is cool"):
    myfont = pygame.font.SysFont("None", 28)
    mytext = myfont.render(msg, True, (255, 0, 0))
    mytext = mytext.convert_alpha()
    return mytext


def pressedKeysString():
    pressedkeys = pygame.key.get_pressed()
    line = ""
    if pressedkeys[pygame.K_a]:
        line += "a "
    if pressedkeys[pygame.K_d]:
        line += "d "
    if pressedkeys[pygame.K_w]:
        line += "w "
    if pressedkeys[pygame.K_s]:
        line += "s "
    if pressedkeys[pygame.K_LCTRL]:
        line += "LCTRL"
    return line


def main():
    pygame.init()
    screen = pygame.display.set_mode((Config.width, Config.height))
    background = pygame.Surface((screen.get_size()))
    background.fill((128, 128, 255))
    for x in range(0, Config.width, Config.width // Config.xtiles):
        pygame.draw.line(background, (255, 255, 255), (x, 0), (x, Config.height))
    for y in range(0, Config.height, Config.height // Config.ytiles):
        pygame.draw.line(background, (255, 255, 255), (0, y), (Config.width, y))
    pygame.draw.rect(background, (128, 128, 255), (0, 0, Config.width, 70))

    background = background.convert()
    screen.blit(background, (0, 0))
    clock = pygame.time.Clock()
    FPS = Config.fps
    playtime = 0

    tankgroup = pygame.sprite.Group()
    bulletgroup = pygame.sprite.Group()
    allgroup = pygame.sprite.LayeredUpdates()

    Tank._layer = 4
    Bullet._layer = 7
    Tracer._layer = 5
    Turret._layer = 6
    Text._layer = 3

    Tank.groups = tankgroup, allgroup
    Turret.groups = allgroup
    Bullet.groups = bulletgroup, allgroup
    Text.groups = allgroup
    player1 = Tank((150, 250), 90)
    player2 = Tank((450, 250), -90)
    status3 = Text((Config.width // 2, 10), "")
    mainloop = True
    while mainloop:
        milliseconds = clock.tick(Config.fps)
        seconds = milliseconds / 1000.0
        playtime += seconds

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                mainloop = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    mainloop = False

        pygame.display.set_caption("FPS: %.2f keys: %s" % (clock.get_fps(), pressedKeysString()))
        allgroup.clear(screen, background)
        allgroup.update(seconds)
        allgroup.draw(screen)
        pygame.display.flip()
    return 0

if __name__ == '__main__':
    main()
